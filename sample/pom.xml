<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.manoelcampos</groupId>
    <artifactId>dtogen-sample</artifactId>
    <!-- The version of the sample project defines the DTOGen version used. -->
    <version>2.1.4</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <dtogen.version>${project.version}</dtogen.version>
        <lombok.version>1.18.36</lombok.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.github.manoelcampos</groupId>
            <artifactId>dtogen</artifactId>
            <version>${dtogen.version}</version>
        </dependency>

        <dependency>
            <!-- Lombok is used just to simplify the code of the model classes,
             autogenerating getters, setters and toString. -->
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <!--
             Used just to show that DTO Gen includes all annotations
             from fields in the model classes to the generated DTO record.
             This way, annotations such as hibernate validation are included
             in the DTO, enabling it to be validated
             in the same way as the model class fields are.
            -->
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>8.0.1.Final</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${maven.compiler.release}</source>
                    <target>${maven.compiler.release}</target>
                    <encoding>UTF-8</encoding>
                    <annotationProcessorPaths>
                        <!-- Defines the order in which the annotation processors must execute.
                        Lombok needs to be the first one, because if you are using it,
                        the generated DTOs may include Lombok's annotations
                        and may need the code generated by it (such as getters and setters). -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>io.github.manoelcampos</groupId>
                            <artifactId>dtogen</artifactId>
                            <version>${dtogen.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <arg>-processor</arg>
                        <arg>lombok.launch.AnnotationProcessorHider$AnnotationProcessor,io.github.manoelcampos.dtogen.DTOProcessor</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
            </plugin>
        </plugins>
    </build>
</project>
